module.exports = function(RED) {
    function SendGotifyMessage(config) {
        RED.nodes.createNode(this,config);
        var node = this;
	var request = require("request");
        node.on('input', function(msg) {

	// Retrieve the config node
        this.server = RED.nodes.getNode(config.server);
	this.app = RED.nodes.getNode(config.app);

        if (this.server) {

        var fullurl = this.server.baseUrl + ":" + this.server.port;
	fullurl += "/message?token=";
	fullurl += this.app.token;
        //var headers = "'Authorization': 'Bearer " + this.server.token + "'";

	var MarkDown = msg.markdown || config.markdown;
	var BigImage = msg.bigimage || config.bigimage;
	var Message = msg.message || config.message;
	var Priority = msg.priority || config.priority;
	var Priority = parseInt(Priority);
	var Title = msg.title || config.title;
	var msgbody = ""

	if (MarkDown == undefined && BigImage)
	{
		msgbody = {"title": Title,
        	"message": Message,
        	"priority": Priority,
        	"extras":
        	{
            	"client::notification":
            		{
                	"bigImageUrl": BigImage
            		}
        	}
		} ;
	}

	if ( MarkDown === true && BigImage)
	{
    		msgbody = {"title": Title,
        	"message": Message,
        	"priority": Priority,
        	"extras":
        	{
        	"client::display":
			{
            		"contentType": "text/markdown"
            		},
            	"client::notification":
		        {
                	"bigImageUrl": BigImage
            		}
		}
        	} ;
	}

	if ( MarkDown === true && BigImage === false)
        {
                msgbody = {"title": Title,
                "message": Message,
                "priority": Priority,
                "extras":
         	       {
                	"client::display":
                        {
                        "contentType": "text/markdown"
                        }
                }
                } ;
    	} else {
		msgbody =  {"title": Title,
    		"message": Message,
    		"priority": Priority
     		} 
	}


	msg.msgbody = msgbody;
        msg.fullurl = fullurl;
        var options = {
        method: "POST",
        url: fullurl,
//        headers: { Authorization: 'Bearer ' + this.server.token },
	body: msgbody, json: true
        };
//        msg.headers = headers;
    	request(options, function(error, response, body) {
        if (error) {
            node.error(error);
	    node.send(msg);
        } else {
     	    msg.payload = body;
            msg.statusCode = response.statusCode;
            node.send(msg);
        }
        }); //closes request
        } else {
            msg.payload = "No server  configured"
            node.send(msg);
		}
       });
    }
    RED.nodes.registerType("gotify-send",SendGotifyMessage);
}
